<?php
require_once 'Util.php';

class TestSCAjax extends PHPUnit_Framework_TestCase {
	protected $backupGlobals = false;

	public static function setUpBeforeClass() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		$content = '\'\'Auto generated by Outlook Addin, please don\'t modify this page.\'\'
{{Wiki Mail
|from=ning@teammersion.com
|to=JesseW@vulcan.com
|cc=justinzh@teammersion.com
|sent=2008-12-18 01:08:01
}}
<nowiki>Good luck! :)</nowiki>
		';
		global $wgTitle;
		$wgTitle = $page_title;
		$article->doEdit($content, 'setup before php unit');
    }

    public static function tearDownAfterClass() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		global $wgTitle;
		$wgTitle = $page_title;
		$article->doDelete('tear down after php unit');
    }
	
    private $url = "http://localhost:7071/dev/index.php";

	function testSaveMappingData() {
		$cc = new cURL();
		$ret = $cc->post($this->url, 'action=ajax&rs=smwf_sc_Access&rsargs[]=saveMappingData&rsargs[]=Project Bug|,Project Bug.Project Bug.debugger|Wiki Mail.Wiki Mail.to,Project Bug.Project Bug.report date|Wiki Mail.Wiki Mail.sent,Project Bug.Project Bug.reporter|Wiki Mail.Wiki Mail.from');
		$ps = explode("\r\n\r\n", $ret, 2); // standard HTML 1.1
		$ret = $ps[1];

		$this->assertEquals($ret, '{success:true, msg:"Your schema mapping is saved successfully."}');
	}

	function testGetMappingData() {
		$cc = new cURL();
		$ret = $cc->post($this->url, 'action=ajax&rs=smwf_sc_Access&rsargs[]=saveEnabledForms&rsargs[]=Semantic Connector Test,Project Task,Wiki Mail');
		$ps = explode("\r\n\r\n", $ret, 2); // standard HTML 1.1
		$ret = $ps[1];
		
		$this->assertEquals($ret, '{success:true, msg:"Your schema mapping is saved successfully."}');
	}
	
	function testSaveEnabledForms() {
		$cc = new cURL();
		$ret = $cc->post($this->url, 'action=ajax&rs=smwf_sc_Access&rsargs[]=getMappingData&rsargs[]=Project%20Bug');
		$ps = explode("\r\n\r\n", $ret, 2); // standard HTML 1.1
		$ret = $ps[1];
		$ps = explode("mapping:{", $ret, 2);
		$ret = preg_replace('/\s*\n\s*/', '', $ps[0]);
		$acceptable = '{
        source:{
                form:"Project Bug",
                templates: [
                {id:"Project Bug", fields:[{id:"story"},{id:"reporter"},{id:"report date"},{id:"sprint output"},{id:"priority"},{id:"debugger"},{id:"fix date"},{id:"status"},{id:"attachment"},]},
                ],
                mappedData: [{
                        		src:"Project Bug.Project Bug.reporter",
                        		map:"Wiki Mail.Wiki Mail.from"
						},{
                                src:"Project Bug.Project Bug.report date",
                                map:"Wiki Mail.Wiki Mail.sent"
                        },{
                        		src:"Project Bug.Project Bug.debugger",
                                map:"Wiki Mail.Wiki Mail.to"
                        },
                ]
        },';
		$acceptable = preg_replace('/\s*\n\s*/', '', $acceptable);
		
		$this->assertEquals($ret, $acceptable);
	}
}
?>