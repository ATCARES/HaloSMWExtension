<?php

class TestPageMapping extends PHPUnit_Framework_TestCase {
	protected $backupGlobals = false;
	
	public static function setUpBeforeClass() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		$content = '\'\'Auto generated by Outlook Addin, please don\'t modify this page.\'\'
{{Wiki Mail
|from=ning@teammersion.com
|to=JesseW@vulcan.com
|cc=justinzh@teammersion.com
|sent=2008-12-18 01:08:01
}}
<nowiki>Good luck! :)</nowiki>
		';
		global $wgTitle;
		$wgTitle = $page_title;
		$article->doEdit($content, 'setup before php unit');
    }

    public static function tearDownAfterClass() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		global $wgTitle;
		$wgTitle = $page_title;
		$article->doDelete('tear down after php unit');
    }
	
    function testSaveEnabledForms_1() {
		$ret = SCProcessor::saveEnabledForms (SemanticConnectorTests::$TEST_PAGE_NAME, 'Wiki Mail');
		$this->assertEquals($ret, '{success:true, msg:"Your schema mapping is saved successfully."}');
	}
	
	function testSaveEnabledForms_2() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		$text = $article->getContent();
		$ret = SCProcessor::saveEnabledForms (SemanticConnectorTests::$TEST_PAGE_NAME, 'Wiki Mail', array('Project Task', 'Project Bug'));
		$article->doEdit($text,'');
		$this->assertEquals($ret, '{success:true, msg:"Your schema mapping is saved successfully."}');
	}
	
	function testSemanticDataAfterMultipleMapped() {
		// current form is 'Wiki Mail', anyway, properties in 'Project Task' is set
		$querystring = '[[' . SemanticConnectorTests::$TEST_PAGE_NAME . ']][[Project task owner::JesseW@vulcan.com]]';
		global $smwgQDefaultNamespaces, $smwgQFeatures;
		$qp = new SMWQueryParser($smwgQFeatures);
		$qp->setDefaultNamespaces($smwgQDefaultNamespaces);
		$desc = $qp->getQueryDescription($querystring);
		$desc->prependPrintRequest(new SMWPrintRequest(SMWPrintRequest::PRINT_THIS, ''));
	
		$query = new SMWQuery($desc, true, false);
		$query->setQueryString($querystring);
		$query->addErrors($qp->getErrors()); // keep parsing errors for later output
		
		$row = smwfGetStore()->getQueryResult($query)->getNext();
		$ret = $row[0]->getNextObject()->getShortText(SMW_OUTPUT_WIKI);

		$this->assertEquals($ret, SemanticConnectorTests::$TEST_PAGE_NAME);
	}
	
	function testToMappedFormContent() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		$text = $article->getContent();
		$ret = SCProcessor::toMappedFormContent ($text, $page_title, Title::newFromText( 'Project Bug', SF_NS_FORM ));
		$acceptable = '\'\'Auto generated by Outlook Addin, please don\'t modify this page.\'\'
{{Project Bug
| debugger = JesseW@vulcan.com
| report date = 2008-12-18 01:08:01
| Wiki Mail+Wiki Mail+from = ning@teammersion.com
| Wiki Mail+Wiki Mail+cc = justinzh@teammersion.com
}}
<nowiki>Good luck! :)</nowiki>';
		$ret = preg_replace('/\s*\n\s*/', "\n", $ret);
		$acceptable = preg_replace('/\s*\n\s*/', "\n", $acceptable);
		
		$this->assertEquals($ret, $acceptable);
	}
	
	function testSaveEnabledForms_3() {
		$page_title = Title::newFromText( SemanticConnectorTests::$TEST_PAGE_NAME );
		$article = new Article($page_title);
		$text = $article->getContent();
		$content = SCProcessor::toMappedFormContent ($text, $page_title, Title::newFromText( 'Project Task', SF_NS_FORM ));
		$ret = SCProcessor::saveEnabledForms (SemanticConnectorTests::$TEST_PAGE_NAME, 'Project Task');
		$article->doEdit($content,'');
		$this->assertEquals($ret, '{success:true, msg:"Your schema mapping is saved successfully."}');
	}
	
	function testGetValidForms() {
		SCProcessor::$validForms = array();
		$ret = SCProcessor::getValidForms (SemanticConnectorTests::$TEST_PAGE_NAME);
		$acceptable = array('Wiki Mail', 'Project Task');
		$this->assertEquals(sort($ret), sort($acceptable));
	}
	
	function testGetActivedForm(){
		SCProcessor::$enabledForms = array();
		$ret = SCProcessor::getActivedForm (SemanticConnectorTests::$TEST_PAGE_NAME);
		$acceptable = array('Project Task');
		$this->assertEquals(sort($ret), sort($acceptable));
	}

	function testGetPageMappedFormData() {
		$ret = SCProcessor::getPageMappedFormData (SemanticConnectorTests::$TEST_PAGE_NAME, 'Project Task');
		$acceptable = array(
		    'Project Task.owner' => 'JesseW@vulcan.com',
		    'Project Task.start date' => '2008-12-18 01:08:01',
		    'Project Task.Wiki Mail+Wiki Mail+from' => 'ning@teammersion.com',
		    'Project Task.Wiki Mail+Wiki Mail+cc' => 'justinzh@teammersion.com',
		    '{free text}' => '\'\'Auto generated by Outlook Addin, please don\'t modify this page.\'\'

<nowiki>Good luck! :)</nowiki>'
		);
		$this->assertEquals($ret['Project Task.owner'], $acceptable['Project Task.owner']);
		$this->assertEquals($ret['Project Task.start date'], $acceptable['Project Task.start date']);
		$this->assertEquals($ret['Project Task.Wiki Mail+Wiki Mail+from'], $acceptable['Project Task.Wiki Mail+Wiki Mail+from']);
		$this->assertEquals($ret['Project Task.Wiki Mail+Wiki Mail+cc'], $acceptable['Project Task.Wiki Mail+Wiki Mail+cc']);
		$this->assertEquals(preg_replace('/\s*\n\s*/',"\n",$ret['{free text}']), preg_replace('/\s*\n\s*/',"\n",$acceptable['{free text}']));
	}

	function testResetPageForms() {
		SCProcessor::resetPageForms (SemanticConnectorTests::$TEST_PAGE_NAME);
		
		SCProcessor::$enabledForms = array();
		$ret = SCProcessor::getActivedForm (SemanticConnectorTests::$TEST_PAGE_NAME);
		$this->assertNull($ret);
		
		SCProcessor::$validForms = array();
		$ret = SCProcessor::getValidForms (SemanticConnectorTests::$TEST_PAGE_NAME);
		$acceptable = array('Wiki Mail', 'Project Task');
		$this->assertEquals(sort($ret), sort($acceptable));
	}
}
?>