Index: extensions/SemanticResultFormats/Calendar/SRF_Calendar.php
===================================================================
--- extensions/SemanticResultFormats/Calendar/SRF_Calendar.php	(revision 6699)
+++ extensions/SemanticResultFormats/Calendar/SRF_Calendar.php	(working copy)
@@ -13,7 +13,14 @@
 
 	protected $mTemplate = '';
 	protected $mUserParam = '';
-
+ 
+    function getParameters() {
+        return array(
+			array('name' => 'template', 'type' => 'string', 'description' => "Template used to display"),
+			array('name' => 'userparam', 'type' => 'string', 'description' => "User param")
+		);
+    }
+   
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
 
Index: extensions/SemanticResultFormats/Exhibit/SRF_Exhibit.php
===================================================================
--- extensions/SemanticResultFormats/Exhibit/SRF_Exhibit.php	(revision 6703)
+++ extensions/SemanticResultFormats/Exhibit/SRF_Exhibit.php	(working copy)
@@ -16,7 +16,17 @@
 	protected $m_types = array("_wpg" => "text", "_num" => "number", "_dat" => "date", "_geo" => "text", "_uri" => "url");
 
 	protected static $exhibitRunningNumber = 0; //not sufficient since there might be multiple pages rendered within one PHP run; but good enough now
-
+	
+	function getParameters() {
+		return array(
+		array('name' => 'views', 'type' => 'string', 'description' => "tiles, tabular, timeline, maps. MULTIPLE separated by comma)"),
+		array('name' => 'facets', 'type' => 'string', 'description' => "List of properties to be used as facets, separated by commas", 'constraints' => "namespace: "+SMW_NS_PROPERTY),
+		array('name' => 'order', 'type' => 'enumeration', 'values' => array('ascending','descending'),  'description' => "Sort order"),
+		array('name' => 'link', 'type' => 'enumeration', 'values' => array('all','subject', 'none'),  'description' => "Show everything as link, only subjects or nothing at all."),
+		array('name' => 'limit', 'type' => 'int', 'description' => "Instance display limit")
+		);
+	}
+	
 	///overwrite function to allow execution of result printer even if no results are available (in case remote query yields no results in local wiki)
 	public function getResult($results, $params, $outputmode) {
 		$this->readParameters($params,$outputmode);
Index: extensions/SemanticResultFormats/GoogleCharts/SRF_GoogleBar.php
===================================================================
--- extensions/SemanticResultFormats/GoogleCharts/SRF_GoogleBar.php	(revision 6699)
+++ extensions/SemanticResultFormats/GoogleCharts/SRF_GoogleBar.php	(working copy)
@@ -11,7 +11,14 @@
 
 class SRFGoogleBar extends SMWResultPrinter {
 	protected $m_width = '250';
-
+    
+	function getParameters() {
+        return array(
+			array('name' => 'width', 'type' => 'int', 'description' => "Width of bar"),
+			array('name' => 'height', 'type' => 'int', 'description' => "Height of bar")
+		);
+    }
+   
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
 		if (array_key_exists('width', $this->m_params)) {
Index: extensions/SemanticResultFormats/GoogleCharts/SRF_GooglePie.php
===================================================================
--- extensions/SemanticResultFormats/GoogleCharts/SRF_GooglePie.php	(revision 6699)
+++ extensions/SemanticResultFormats/GoogleCharts/SRF_GooglePie.php	(working copy)
@@ -12,6 +12,14 @@
 class SRFGooglePie extends SMWResultPrinter {
 	protected $m_width = 250;
 	protected $m_heighth = 250;
+	
+	function getParameters() {
+        return array(
+			array('name' => 'width', 'type' => 'int', 'description' => "Width of pie"),
+			array('name' => 'height', 'type' => 'int', 'description' => "Height of pie")
+		);
+    }
+   
 
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
Index: extensions/SemanticResultFormats/GraphViz/SRF_Graph.php
===================================================================
--- extensions/SemanticResultFormats/GraphViz/SRF_Graph.php	(revision 6699)
+++ extensions/SemanticResultFormats/GraphViz/SRF_Graph.php	(working copy)
@@ -25,7 +25,21 @@
 	protected $m_graphSize="";
 	protected $m_labelArray = array();
 	protected $m_graphColors = array("black","red","green","blue","darkviolet","gold","deeppink","brown","bisque","darkgreen","yellow","darkblue","magenta","steelblue2");
-
+    
+	function getParameters() {
+        return array(
+			array('name' => 'graphname', 'type' => 'string', 'description' => "Title"),
+			array('name' => 'graphsize', 'type' => 'int', 'description' => "Graph size (in px)"),
+			array('name' => 'graphlegend', 'type' => 'enumeration', 'values'=>array('yes', 'no'), 'description' => "Show graph legend or not."),
+			array('name' => 'graphlabel', 'type' => 'enumeration', 'values'=>array('yes', 'no'), 'description' => "Graph label"),
+			array('name' => 'rankdir', 'type' => 'string', 'description' => "Rank dir"),
+			array('name' => 'graphlink', 'type' => 'enumeration', 'values'=>array('yes', 'no'), 'description' => "Graph link"),
+			array('name' => 'graphcolor', 'type' => 'enumeration', 'values'=>array('yes', 'no'), 'description' => "Graph color"),
+			
+			
+		);
+    }
+       
 	protected function readParameters($params,$outputmode) {
 
 		SMWResultPrinter::readParameters($params,$outputmode);
Index: extensions/SemanticResultFormats/Math/SRF_Math.php
===================================================================
--- extensions/SemanticResultFormats/Math/SRF_Math.php	(revision 6699)
+++ extensions/SemanticResultFormats/Math/SRF_Math.php	(working copy)
@@ -12,7 +12,13 @@
 if (!defined('MEDIAWIKI')) die();
 
 class SRFMath extends SMWResultPrinter {
-
+    
+	function getParameters() {
+        return array(
+			array('name' => 'limit', 'type' => 'int', 'description' => "Instance display limit")
+		);
+    }
+    
 	public function getName() {
 		wfLoadExtensionMessages('SemanticResultFormats');
 		return wfMsg('srf_printername_' . $this->mFormat);
Index: extensions/SemanticResultFormats/Outline/SRF_Outline.php
===================================================================
--- extensions/SemanticResultFormats/Outline/SRF_Outline.php	(revision 6703)
+++ extensions/SemanticResultFormats/Outline/SRF_Outline.php	(working copy)
@@ -84,7 +84,15 @@
 
 	protected $mOutlineProperties = array();
 	protected $mInnerFormat = '';
-
+  
+	function getParameters() {
+        $params = array(
+			array('name' => 'outlineproperties', 'type' => 'string', 'description' => "The list of properties to be used as outline headers, separated by commas.", 'constraints' => "namespace: ".SMW_NS_PROPERTY),
+			
+		); 
+		return array_merge($params, parent::getParameters());
+    }
+       
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
 
Index: extensions/SemanticResultFormats/Ploticus/SRF_Ploticus.php
===================================================================
--- extensions/SemanticResultFormats/Ploticus/SRF_Ploticus.php	(revision 6699)
+++ extensions/SemanticResultFormats/Ploticus/SRF_Ploticus.php	(working copy)
@@ -36,7 +36,30 @@
 	protected $m_tblheight = '';
 	protected $m_width = '';
 	protected $m_height = '';
-
+    
+	function getParameters() {
+        return array(
+			array('name' => 'ploticusmode', 'type' => 'enumeration', 'values' => array('preftab', 'script')),
+			array('name' => 'ploticusparams', 'type' => 'string'),
+			array('name' => 'imageformat', 'type' => 'enumeration', 'values' => array('png', ' gif', 'jpeg', 'svg', 'svgz', 'swf', 'eps', 'ps', 'drawdump', 'drawdumpa'), 'defaultValue'=>"png"),
+			array('name' => 'titletext', 'type' => 'string'),
+			array('name' => 'showcsv', 'type' => 'boolean'),
+			array('name' => 'ploticusmode', 'type' => 'string'),
+			array('name' => 'debug', 'type' => 'boolean'),
+			array('name' => 'liveupdating', 'type' => 'boolean'),
+			array('name' => 'updatefrequency', 'type' => 'int'),
+			array('name' => 'showtimestamp', 'type' => 'boolean'),
+			array('name' => 'showimagelink', 'type' => 'boolean'),
+			array('name' => 'showrefresh', 'type' => 'boolean'),
+			array('name' => 'drawdumpoutput', 'type' => 'string'),
+			array('name' => 'tblwidth', 'type' => 'int'),
+			array('name' => 'tblheight', 'type' => 'int'),
+			array('name' => 'width', 'type' => 'int'),
+			array('name' => 'height', 'type' => 'int')
+			
+		);
+    }
+    
 	protected function readParameters($params, $outputmode) {
 		SMWResultPrinter::readParameters($params, $outputmode);
 		if (array_key_exists('ploticusparams', $this->m_params)) {
Index: extensions/SemanticResultFormats/Timeline/SRF_Timeline.php
===================================================================
--- extensions/SemanticResultFormats/Timeline/SRF_Timeline.php	(revision 6699)
+++ extensions/SemanticResultFormats/Timeline/SRF_Timeline.php	(working copy)
@@ -17,7 +17,25 @@
 	protected $m_tlsize = ''; // CSS-compatible size (such as 400px)
 	protected $m_tlbands = ''; // array of band IDs (MONTH, YEAR, ...)
 	protected $m_tlpos = ''; // position identifier (start, end, today, middle)
+   
+	function getParameters() {
+        return array(
+			array('name' => 'limit', 'type' => 'int', 'description' => "Instance display limit"),
+			array('name' => 'timelinestart', 'type' => 'string', 'description' => "Can be used to define a specific printout (property) name to use as a first timepoint in timeline. "),
+			array('name' => 'timelineend', 'type' => 'string', 'description' => "Can be used to define a specific printout (property) name to use as second timepoint in timeline. "),
+			array('name' => 'timelinesize', 'type' => 'int', 'defaultValue'=> "300", 'description' => "Can be used to give the height of the timeline. The default value is 300px."),
+			array('name' => 'timelinebands', 'type' => 'string', 'description' => "Defines which bands are displayed in the result. Available bands are DECADE, YEAR, MONTH, WEEK, and DAY. Bands should be given from finer to coarser, and be separated by commas as in the above example. "),
+			array('name' => 'timelineposition', 'type' => 'enumeration', 'values' => array('middle', 'start', 'end'), 'defaultValue'=>"middle", 'description' => "Defines where the timeline initially focusses at. Possible values are start (earliest entry), middle (middle entry), end (latest entry).")
+		);
+    }
 
+    function getScripts() {
+        global $srfgScriptPath;
+        $scripts [] = '<script type="text/javascript" src="' . $srfgScriptPath .  '/Timeline/SRF_timeline.js"></script>' . "\n";
+        $scripts [] = '<script type="text/javascript" src="' . $srfgScriptPath .  '/Timeline/SimileTimeline/timeline-api.js"></script>' . "\n";
+        return $scripts;
+    }
+    
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
 
@@ -109,6 +127,7 @@
 							$objectlabel = $object->getLongText($outputmode,$l);
 						} else {
 							$objectlabel = $object->getShortText($outputmode,$l);
+                           if ($objectlabel == '') continue;
 						}
 						$urlobject =  ($l !== NULL);
 						$header = '';
Index: extensions/SemanticResultFormats/iCalendar/SRF_iCalendar.php
===================================================================
--- extensions/SemanticResultFormats/iCalendar/SRF_iCalendar.php	(revision 6699)
+++ extensions/SemanticResultFormats/iCalendar/SRF_iCalendar.php	(working copy)
@@ -14,7 +14,15 @@
 class SRFiCalendar extends SMWResultPrinter {
 	protected $m_title = '';
 	protected $m_description = '';
-
+    
+	function getParameters() {
+        return array(
+			array('name' => 'icalendartitle', 'type' => 'string', 'description' => "iCalendar title"),
+			array('name' => 'icalendardescription', 'type' => 'string', 'description' => "iCalendar description")
+		); 
+    }
+   
+    
 	protected function readParameters($params,$outputmode) {
 		SMWResultPrinter::readParameters($params,$outputmode);
 		if (array_key_exists('title', $this->m_params)) {
