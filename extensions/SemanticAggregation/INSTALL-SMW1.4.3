== Requirements ==

* MediaWiki 1.13.5
* Semantic MediaWiki 1.4.2
* PHP 5.x or greater installed and working
* MySQL >= 4.0.14 (version required by MediaWiki)

== Installation ==

Edit $IP/LocalSettings.php and add:

    include_once('extensions/SemanticAggregation/includes/SA_Initialize.php');

Find the file '$IP/extensions/SemanticMediaWiki/includes/SMW_QueryProcessor.php', 
apply the following patch:

@@ -190,6 +190,9 @@
 			} elseif ($param{0} == '?') { // print statement
 				$param = substr($param,1);
 				$parts = explode('=',$param,2);
+				$tmps = explode('>',$parts[0],2);
+				$parts[0] = $tmps[0];
+				$aggregation = trim($tmps[1]);
 				$propparts = explode('#',$parts[0],2);
 				if (trim($propparts[0]) == '') { // print "this"
 					$printmode = SMWPrintRequest::PRINT_THIS;
@@ -225,7 +228,7 @@
 				if (count($parts) > 1) { // label found, use this instead of default
 					$label = trim($parts[1]);
 				}
-				$printouts[] = new SMWPrintRequest($printmode, $label, $data, trim($propparts[1]));
+				$printouts[] = new SMWAggregatePrintRequest($printmode, $label, $data, trim($propparts[1]), $aggregation);
 			} else { // parameter or query
 				$parts = explode('=',$param,2);
 				if (count($parts) >= 2) {


Find the file '$IP/extensions/SemanticMediaWiki/skins/SMW_sorttable.js', 
apply the following patch:

@@ -119,12 +119,21 @@
     SORT_COLUMN_INDEX = column;
     var firstRow = new Array();
     var newRows = new Array();
+    // aggregate patch
+    var headers = new Array();
     var footers = new Array();
     for (i=0;i<table.rows[0].length;i++) { firstRow[i] = table.rows[0][i]; }
     // class "sortbottom" makes rows sort below all others, but they are still sorted
     // class "smwfooter" excludes rows from sorting and appends them below in unchanged order
     for (j=1;j<table.rows.length;j++) {
-       if ((!table.rows[j].className || table.rows[j].className.indexOf('smwfooter') == -1)) { newRows.push(table.rows[j]); } else { footers.push(table.rows[j]); }
+       // aggregate patch, add headers
+       if (!table.rows[j].className || (table.rows[j].className.indexOf('smwfooter') == -1 && table.rows[j].className.indexOf('smwheader') == -1)) {
+       	 newRows.push(table.rows[j]); 
+       } else if(table.rows[j].className.indexOf('smwfooter') == -1) {
+       	 headers.push(table.rows[j]); 
+       } else {
+       	 footers.push(table.rows[j]);
+       }
     }
 
     newRows.sort(sortfn);
@@ -141,6 +150,8 @@
 
     // We appendChild rows that already exist to the tbody, so it moves them rather than creating new ones
     // don't do sortbottom rows
+    // aggregate patch
+    for (i=0;i<headers.length;i++) { table.tBodies[0].appendChild(headers[i]);}
     for (i=0;i<newRows.length;i++) { if (!newRows[i].className || (newRows[i].className && (newRows[i].className.indexOf('sortbottom') == -1))) table.tBodies[0].appendChild(newRows[i]);}
     // do sortbottom rows only
     for (i=0;i<newRows.length;i++) { if (newRows[i].className && (newRows[i].className.indexOf('sortbottom') != -1)) table.tBodies[0].appendChild(newRows[i]);}
