<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
    $IP = MW_INSTALL_PATH;
} else {
    $IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '64M' );

if ( $wgCommandLineMode ) {
    if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
        die( "This script must be run from the command line\n" );
    }
} elseif ( empty( $wgNoOutputBuffer ) ) {
    ## Compress output if the browser supports it
    if( !ini_get( 'zlib.output_compression' ) ) @ob_start( 'ob_gzhandler' );
}

$wgSitename         = "Halo3wiki";

$wgScriptPath       = "/{{script-path}}";
$wgScript           = "$wgScriptPath/index.php";
$wgRedirectScript   = "$wgScriptPath/redirect.php";

## For more information on customizing the URLs please see:
## http://meta.wikimedia.org/wiki/Eliminating_index.php_from_the_url
## If using PHP as a CGI module, the ?title= style usually must be used.
$wgArticlePath      = "$wgScript/$1";
# $wgArticlePath      = "$wgScript?title=$1";

$wgStylePath        = "$wgScriptPath/skins";
$wgStyleDirectory   = "$IP/skins";
$wgLogo             = "$wgStylePath/common/images/wiki.jpg";

$wgUploadPath       = "$wgScriptPath/images";
$wgUploadDirectory  = "$IP/images";

$wgEnableEmail      = true;
$wgEnableUserEmail  = true;

$wgEmergencyContact = "kuehn@ontoprise.de";
$wgPasswordSender = "kuehn@ontoprise.de";

## For a detailed description of the following switches see
## http://meta.wikimedia.org/Enotif and http://meta.wikimedia.org/Eauthent
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgDBtype           = "mysql";
$wgDBserver         = "127.0.0.1";
$wgDBname           = "semwiki";
$wgDBuser           = "root";
$wgDBpassword       = "m8nix";
$wgDBport           = "3306";
$wgDBprefix         = "";

# Schemas for Postgres
$wgDBmwschema       = "mediawiki";
$wgDBts2schema      = "public";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType = CACHE_MEMCACHED; /* use CACHE_NONE for disabling it */
$wgParserCacheType = CACHE_MEMCACHED;
$wgMessageCacheType = CACHE_MEMCACHED;
$wgMemCachedServers = array( "127.0.0.1:11211" );
$wgEnableParserCache = true;

//$wgUseFileCache = true; /* default: false */
$wgFileCacheDirectory = "$IP/cache";
//$wgShowIPinHeader = false;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads=true;
$wgUseImageResize      = true;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "C:\Programme\ImageMagick-6.3.2-Q16\convert";
$wgUseAjax=true;

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;
$wgMathPath         = "{$wgUploadPath}/math";
$wgMathDirectory    = "{$wgUploadDirectory}/math";
$wgTmpDirectory     = "{$wgUploadDirectory}/tmp";

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "en";

$wgProxyKey = "4ea88d6d15d7e1935fddb31d9f5a9a33911f0622a3d46e230875a22e70e676";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
$wgDefaultSkin = 'ontoskin';
if ($GLOBALS['wgDefaultSkin'] == 'ontoskin') {
    $wgLogo = "$wgStylePath/ontoskin/images/wiki.jpg";
} else if ($GLOBALS['wgDefaultSkin'] == 'ontoskin2') {
     $wgLogo = "$wgStylePath/ontoskin2/images/wiki.jpg";
} else if ($GLOBALS['wgDefaultSkin'] == 'ontoskin3') {
     $wgLogo = "$wgStylePath/ontoskin3/img/wiki.jpg";
}

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$configdate = gmdate( 'YmdHis', @filemtime( __FILE__ ) );
$wgCacheEpoch = max( $wgCacheEpoch, $configdate );

#Enable upload of "SVG" images
array_push($wgFileExtensions, "svg");

$wgShowExceptionDetails = true;


//SMWHALO Variable insertion marker. DO NOT REMOVE!!

// SMW options
$smwgIQEnabled=true;
$smwgOWLFullExport = true;


// SMWHalo options
$smwgDefaultCollation="latin1_bin";
$smwgDeployVersion=true;
$smwgEnableUploadConverter = true;
$smwgUseEditDistance = false;
$smwgShowDerivedFacts = true;

// SemanticGardening options
$sgagKeepGardeningConsole=false;
$sgagGardeningBotDelay=100;


$wgVerifyMimeType=false;
array_push($wgFileExtensions, "owl");

// rights
$wgGroupPermissions['*']['edit']=false;
$wgGroupPermissions['*']['gardening']=false;

$wgGroupPermissions['user']['annotate']=true;
$wgGroupPermissions['user']['edit']=true;
$wgGroupPermissions['user']['wysiwyg']=false;
$wgGroupPermissions['user']['move']=false;

$wgGroupPermissions['ontologist']['annotate']=true;
$wgGroupPermissions['ontologist']['edit']=true;
$wgGroupPermissions['ontologist']['wysiwyg']=false;
$wgGroupPermissions['ontologist']['gardening']=true;

$wgGroupPermissions['sysop']['wysiwyg']=true;
$wgGroupPermissions['sysop']['gardening']=true;
$wgGroupPermissions['sysop']['userrights']=true;
$wgGroupPermissions['sysop']['ontologyediting'] = true; 



// extensions
#ScriptManager
require_once('extensions/ScriptManager/SM_Initialize.php');

#Misc
require_once( "{$IP}/extensions/Cite.php" );

/*start-applicationprogramming*/
require_once( "$IP/extensions/ApplicationProgramming/ParserFunctions/ParserFunctions.php" );
require_once ("$IP/extensions/ApplicationProgramming/StringFunctions/StringFunctions.php");
require_once( "$IP/extensions/ApplicationProgramming/Variables/Variables.php" );
include_once('extensions/ApplicationProgramming/URLArguments/URLArguments.php');
/*end-applicationprogramming*/

#SMW
/*start-smw*/
include_once('extensions/SemanticMediaWiki/includes/SMW_Settings.php');
$smwgShowFactbox = SMW_FACTBOX_SHOWN; 
enableSemantics(/*param-start-enableSemantics*/'localhost:8080'/*param-end-enableSemantics*/);
/*end-smw*/

// auto-templates
$smwhgAutoTemplatesParameters = array (NS_CATEGORY => array("PAGENAME"=>'$FULLPAGENAME', "Has author"=>'$USERNAME'),
                                       SMW_NS_PROPERTY => array("PAGENAME"=>'$FULLPAGENAME', "Has author"=>'$USERNAME'));
$smwhgAutoTemplates = array(NS_CATEGORY => "Category", SMW_NS_PROPERTY => "Property");

/*start-semanticforms*/
include_once('extensions/SemanticForms/includes/SF_Settings.php');
/*end-semanticforms*/

#SMWHalo

/*start-smwhalo*/
$smwgQComparators = '<|>|!|~';
include_once('extensions/SMWHalo/includes/SMW_Initialize.php');
enableSMWHalo(/*param-start-enableSMWHalo*/'SMWHaloStore2', NULL, NULL/*param-end-enableSMWHalo*/);
$wgUseAjax = /*start-variable-wgUseAjax*/true;/*end-variable-wgUseAjax*/
# Data-API
$wgEnableWriteAPI = true;
$pcpWSServer = true;
require_once('extensions/SMWHalo/DataAPI/PageCRUD_Plus/PCP.php');
$pomWSServer = true;
require_once('extensions/SMWHalo/DataAPI/PageObjectModel/POM.php');
require_once('extensions/SMWHalo/DataAPI/SemanticFormsAPI/SemanticFormsAPI.php');
/*end-smwhalo*/

#Semantic Gardening
/*start-semanticgardening*/
$phpInterpreter=/*start-variable-phpInterpreter*/"{{xamp-install}}/php/php.exe";/*end-variable-phpInterpreter*/
include_once('extensions/SemanticGardening/includes/SGA_GardeningInitialize.php');
/*end-semanticgardening*/

# Semantic Maps and required extensions for maps
/*start-semanticmaps*/
require_once( "$IP/extensions/Validator/Validator.php" );
require_once( "$IP/extensions/Maps/Maps.php" );
require_once( "$IP/extensions/SemanticMaps/SemanticMaps.php" );
/*end-semanticmaps*/

#Data import
/*start-dataimport*/
include_once('extensions/DataImport/includes/DI_Initialize.php');
enableDataImportExtension(/*param-start-enableDataImportExtension*//*param-end-enableDataImportExtension*/);
$wgAllowExternalImages=/*start-variable-wgAllowExternalImages*/true;/*end-variable-wgAllowExternalImages*/

#IAI
# Uncomment this if you want to import external wikis 
# with the TermImport framework.
#include_once('extensions/DataImport/IAI/includes/IAI_Initialize.php');
#enableIAI(/*param-start-enableIAI*//*param-end-enableIAI*/);
/*end-dataimport*/

include("extensions/DynamicPageList/DynamicPageList.php");

# SemanticFormsInputs
require_once('extensions/SemanticFormsInputs/SemanticFormsInputs.php');

/*start-semanticresultformats*/
require_once("extensions/SemanticResultFormats/SRF_Settings.php");
$srfgFormats[] = 'googlepie';
$srfgFormats[] = 'googlebar';
$srfgFormats[] = 'math';

// Obtain a key and uncomment the following two lines to enable exhibit 
$srfgFormats[] = 'exhibit';
$wgGoogleMapsKey='ABQIAAAALfJSGT7KuTRZWj3WNooD8xT2yXp_ZAY8_ufC3CFXhHIE1NvwkxSF9PCXcXEIe6Uenfr3x-G8L-rVKw';
require_once("$IP/extensions/SemanticResultFormats/ofc/SRF_OFC_Init.php"); 
/*end-semanticresultformats*/

#Glossary
require_once( "$IP/extensions/Glossary/Glossary.php" );

/*start-haloacl*/
require_once('extensions/HaloACL/includes/HACL_Initialize.php');
/*php-start-MasterTemplate*/
// Remove the comments from the following line to enable the ACL master template
            // for private user spaces. Every new article of a user will only be accessible
            // by himself until the access rights are changed.
            //$haclgNewUserTemplate = "ACL:Template/NewUserTemplate";
/*php-end-MasterTemplate*/
$haclgProtectProperties = false;
enableHaloACL(/*param-start-enableHaloACL*//*param-end-enableHaloACL*/);
/*end-haloacl*/ 

/*start-semanticnotifications*/
include_once('extensions/SemanticNotifications/includes/SN_Initialize.php');
enableSemanticNotifications(); 
/*end-semanticnotifications*/

# NewUserMessage
require_once( "extensions/NewUserMessage/NewUserMessage.php" );

$wgJobRunRate=0;

/*start-richmedia*/
include_once('extensions/RichMedia/includes/RM_Initialize.php');
enableRichMediaExtension();
$wgAllowExternalImages=true;
include_once('extensions/RichMedia/includes/WebDAV/WD_Initialize.php');
#Set default searching for document and pdf namespace
$wgNamespacesToBeSearchedDefault = array(
        NS_MAIN => true,
        NS_DOCUMENT => true,
        NS_PDF => true
);
/*end-richmedia*/

/*start-treeview*/
include('extensions/Treeview/Treeview.php');
$wgTreeViewImages['plus'] = "Plus.gif";
$wgTreeViewShowLines = true;
/*end-treeview*/

/*start-wysiwyg*/
require_once('extensions/SMWHalo/includes/SMW_WYSIWYG.php');
if (array_key_exists('mode', $_REQUEST) && $_REQUEST['mode'] == 'wysiwyg' || (array_key_exists('action', $_REQUEST) && $_REQUEST['action'] == 'ajax' && stripos($_REQUEST['rs'], 'wfSajax') === 0)) {
require_once $IP . "/extensions/FCKeditor/FCKeditor.php";
}
/*end-wysiwyg*/

require_once("$IP/extensions/ImageMap/ImageMap.php");


#Enable semantic annotations for pages in the following namespaces
$smwgNamespacesWithSemanticLinks[NS_TEMPLATE] = true;
$smwgNamespacesWithSemanticLinks[NS_CATEGORY] = true;
$smwgNamespacesWithSemanticLinks[SMW_NS_PROPERTY] = true;
if (defined('SMWH_NS_RULE')) $smwgNamespacesWithSemanticLinks[SMWH_NS_RULE] = true;
$smwgNamespacesWithSemanticLinks[SF_NS_FORM] = true;
$smwgNamespacesWithSemanticLinks[NS_HELP] = true;
$smwgNamespacesWithSemanticLinks[NS_HELP_TALK] = true;
$smwgNamespacesWithSemanticLinks[NS_TEMPLATE] = true;
$smwgNamespacesWithSemanticLinks[SF_NS_FORM] = true;


/*start-semanticformsinputs*/
require_once('extensions/SemanticFormsInputs/SemanticFormsInputs.php');
/*end-semanticformsinputs*/

/*start-collaboration*/
include_once('extensions/Collaboration/includes/CE_Initialize.php');
enableCollaboration();
/*end-collaboration*/

/*start-smwusermanual*/
include_once('extensions/SMWUserManual/includes/SMW_UserManual.php');
enableSMWUserManual();
/*end-smwusermanual*/

/*start-ultrapedia*/
require_once("extensions/Ultrapedia/includes/UP_Initialize.php");
/*end-ultrapedia*/